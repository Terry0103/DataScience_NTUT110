#IMPORT AND OVERVIEW DATA----
raw_data <-  read.csv("C:/Users/user/Desktop/condon/codon_usage.csv", header = T)
raw_data[,1] <- as.factor(raw_data$Kingdom)
table(raw_data[,1])
#IMPORT AND OVERVIEW DATA----
raw_data <-  read.csv("C:/Users/user/Desktop/condon/codon_usage.csv", header = T)
raw_data[,1] <- as.factor(raw_data$Kingdom)
table(raw_data[,1])
Y_level <- c('arc','bct','inv','mam','phg','plm','pln','pri','rod','vrl','vrt')
#6th and 7 th feature be seted as char value so we need turn it to num
raw_data[,6] <- as.numeric(raw_data[,6])
raw_data[,7] <- as.numeric(raw_data[,7])
#detect missing value
mean(is.na(raw_data[,6]))
mean(is.na(raw_data[,7]))
#drop all na value
raw_data <- na.omit(raw_data)
dim(raw_data)
#cut the variables which useless (3rd, 4th, 5th)----
raw_data <- raw_data[,-c(3:5)]
#cut low variance independent features----
data <- raw_data
remove(data)
#create dummy variable for DNAtype feature----
library(fastDummies)
raw_data$DNAtype <- as.factor(raw_data$DNAtype)
str(raw_data$DNAtype)
#the level of DNAtype is 11
raw_data <- dummy_cols(raw_data, select_columns = 'DNAtype')
raw_data <- raw_data[,-2]
dim(raw_data)
#SAMPLING----
set.seed(109)
n = 1500
sample_data <- NULL
for(i in 1:11){
x <- NULL
x <- which(raw_data$Kingdom == Y_level[i])
if(length(x) >= n){
y <- sample(x, size = n, replace = F)
sample_data <- rbind(sample_data, raw_data[y,])
}
else{
y <- sample(x, size = n, replace = T)
sample_data <- rbind(sample_data, raw_data[y,])
}
}
table(sample_data$Kingdom)
#MODEL FITTING
library(tree)
train <- sample(1:nrow(sample_data), size = nrow(sample_data)*0.8, replace = F)
fit.tree <- tree(Kingdom ~ ., data = sample_data, subset = train)
summary(fit.tree)
names(fit.tree)
#misclassify error rate ~ 0.48
plot(fit.tree, type = 'uniform')
text(fit.tree)
prune.fit <- prune.tree(fit.tree, best = 11)
plot(prune.fit, type = 'uniform')
text(prune.fit)
summary(prune.fit)
yhat <- predict(fit.tree, newdata = sample_data[-train,], type = 'class')
head(yhat)
data.test <- sample_data[-train, 'Kingdom']
test_data <- sample_data[-train,]
confusion_tree <- table(Pred = predict(prune.fit, sample_data[train,], type = 'class'),
True = sample_data[train,]$Kingdom)
sum(diag(confusion_tree))/sum(confusion_tree)
confusion_tree <- table(Pred = predict(prune.fit, sample_data[-train,], type = 'class'),
True = sample_data[-train,]$Kingdom)
sum(diag(confusion_tree))/sum(confusion_tree)
confusion_tree <- table(Pred = predict(fit.tree, sample_data[-train,], type = 'class'),
True = sample_data[-train,]$Kingdom)
sum(diag(confusion_tree))/sum(confusion_tree)
